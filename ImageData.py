import os, sys
import files

from PIL import Image

PIXELS_PER_ADDRESS = 8

BITS_PER_BLOCK = 8

colorvalue = {}
colorvalue = {'white':{}}
colorvalue = {'black':{}}
colorvalue = {'gray':{}}
colorvalue = {'none':{}}

colorvalue['white']= {'unicode': u"\u2591", 'char': 1, 'output': (204,206,203)}
colorvalue['gray'] = {'unicode': u"\u2593", 'char': 3, 'output': (177,125,225)}
colorvalue['black']= {'unicode': u"\u2588", 'char': 0, 'output': (145,64,254)}
colorvalue['none'] = {'unicode': u" ", 'char': 2, 'output': (255,0,255)}



class ImageData:

    prefix = 'gfx_'
    framesize = (8,8)
    bitdepth = 2
    mode = 'sprite'

    def openImage(self,filename):
        try:
            self.im = Image.open(filename)
            self.im = self.im.convert("RGB")
            self.filename = filename
            self.fullfilename = files.getFullFilename(self.prefix, self.filename, 'spin')
        except IOError:
            print filename, "is not a valid image file"
            sys.exit(1)

    def getImage(self):
        return self.im


    def setFrameSize(self,framesize):
        self.framesize = framesize
        self.frameboost = (self.framesize[0]*self.bitdepth*self.framesize[1]/PIXELS_PER_ADDRESS) & 0xFFFF
        self.dimensions = (self.framesize[0] & 0xFFFF , self.framesize[1] & 0xFFFF) 
        self.frames_x = self.im.size[0]/self.framesize[0]
        self.frames_y = self.im.size[1]/self.framesize[1]

    def setMode(self,mode):
        self.mode = mode

        if self.mode == 'font':
            prefix = 'font_'
        else:
            prefix = 'gfx_'



    def lineRule(self):
        return "' *********************************************************\n"

    def assembleSpinHeader(self,image):
        output = ""
        output += self.lineRule()
        output += "' "+str(self.prefix)+os.path.splitext(os.path.basename(self.filename))[0]+".spin\n"
        output += "' Graphics generated by img2dat\n"
        output += self.lineRule()

        output += "PUB Addr\n"
        output += "    return @gfx_data\n\n"
        output += "DAT\n\n"
        output += "gfx_data"
        return output

    def assembleWordHeader(self,image):
        output = ""
        output += "word    "+str(self.frameboost)+" ' frameboost\n"
        output += "word    "+str(len(image[0]))+", "+str(len(image))+" ' width, height\n"
        return output


    def assembleLine(self, line, radix):
        output = ""
        colordata = 0

        for x in range(0,len(line)):

            if radix == 'hex':
                if x % BITS_PER_BLOCK == 0:
                    colordata = 0

                colordata += (colorvalue[line[x]]['char'] << ((x % BITS_PER_BLOCK)*2))

                if x % BITS_PER_BLOCK == 7:
                    output += "$"+hex(colordata)[2:].zfill(BITS_PER_BLOCK/2)
                    if x < (len(line)-1):
                        output += ","

            elif radix == 'quaternary':

                if x % BITS_PER_BLOCK == 0:
                    output += "%%"

                xindex = (x/BITS_PER_BLOCK)*BITS_PER_BLOCK + BITS_PER_BLOCK-1 - x % BITS_PER_BLOCK
                output += str(colorvalue[line[xindex]]['char'])

                if x % BITS_PER_BLOCK == 7:
                    if x < (len(line)-1):
                        output += ","

            elif radix == 'unicode':
                output += colorvalue[line[x]]['unicode'].encode('utf-8')
        return output


    def assembleData(self, image, radix):
        output = ""

        for y in range(0,len(image)):
            if radix == 'both':
                output += "\nword    "
                output += self.assembleLine(image[y], 'hex')
                output += " ' "
                output += self.assembleLine(image[y], 'unicode')
            else:
                if radix == 'unicode':
                    output += "\n' "
                else:
                    output += "\nword    "
                output += self.assembleLine(image[y], radix)


        return output

    def assembleSpinFile(self, spritedata):
        output = ""
        output += self.assembleSpinHeader(spritedata[0])
        output += "\n"

        if self.mode == 'sprite':
            output += "\n"
            output += self.assembleWordHeader(spritedata[0])

        frame = 0
        for s in spritedata:
            output += "' frame "+str(frame)
            output += self.assembleData(s,'both')
            output += "\n"
            frame += 1
        output += "\n"

        return output


    def writeSpinFile(self,spin):
        f = open(self.fullfilename,"w")
        f.write(spin)
        f.close()


    def printImageTag(self):
        print "'   Creating:",self.fullfilename
        print "'  Bit depth:",self.bitdepth
        print "' Image Type:",self.mode
        print "' Image size:",self.im.size
        print "' Frame size:",self.framesize
#        print "'     Frames:",count_tiles_x,",",count_tiles_x

