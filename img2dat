#!/usr/bin/env python

import os, sys

from PIL import Image
import argparse

import files
import ImageData


def getCommandLineArguments():
    parser = argparse.ArgumentParser(description='Convert images to Propeller Spin data blocks for use with Lame Graphics.')

    parser.add_argument('-b','--bits', nargs=1, metavar=('BITS'), type=int, choices=[2,8],default=[2],
            help="Bit depth of images.")
    parser.add_argument('-f','--framesize', nargs=2, metavar=('WIDTH','HEIGHT'), type=int,
            help="Size of individual sprite frames (only needed for sprites).")
    parser.add_argument('-d', action='store_true',
            help="Display conversion results.")
    parser.add_argument('-p', action='store_true',
            help="Print conversion output to screen.")

    parser.add_argument('filenames', metavar='FILE', nargs='+', help='Files to convert')
    return parser.parse_args()

def displayResult(scale, oldimage, newimage):
    canvas = Image.new("RGB",(newimage.size[0],oldimage.size[1]+newimage.size[1]))

    canvas.paste(oldimage,(0,0,oldimage.size[0],oldimage.size[1]))
    canvas.paste(newimage,(0,oldimage.size[1]))
    
    canvas = canvas.resize(tuple([scale*x for x in (newimage.size[0],oldimage.size[1]+newimage.size[1])]))
    canvas.show()
        

args = getCommandLineArguments()
filenames = files.cleanFilenames(args.filenames)


if not filenames:
    print "No valid files selected"
    sys.exit(1)

for filename in filenames:

    imgdata = ImageData.ImageData()
    imgdata.openImage(filename)

    if args.framesize:
        try:
            imgdata.setFrameSize(tuple(args.framesize))
        except ValueError as detail:
            print "error:",detail
            sys.exit(1)

    oldim = imgdata.im

    imgdata.padFrames()
    spritedata = imgdata.renderSpriteData()

    if args.d:
        displayResult(4, oldim, imgdata.im)
        
    spin = imgdata.assembleSpinFile(spritedata)

    if args.p:
        print spin

    imgdata.writeSpinFile(spin)
    #imgdata.printImageTag()
